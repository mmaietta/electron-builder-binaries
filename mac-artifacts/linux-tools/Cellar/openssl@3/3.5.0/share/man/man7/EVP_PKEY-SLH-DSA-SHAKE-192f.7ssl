.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EVP_PKEY-SLH-DSA 7ssl"
.TH EVP_PKEY-SLH-DSA 7ssl "2025-04-08" "3.5.0" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
EVP_PKEY\-SLH\-DSA, EVP_KEYMGMT\-SLH\-DSA,
EVP_PKEY\-SLH\-DSA\-SHA2\-128s, EVP_PKEY\-SLH\-DSA\-SHA2\-128f,
EVP_PKEY\-SLH\-DSA\-SHA2\-192s, EVP_PKEY\-SLH\-DSA\-SHA2\-192f,
EVP_PKEY\-SLH\-DSA\-SHA2\-256s, EVP_PKEY\-SLH\-DSA\-SHA2\-256f,
EVP_PKEY\-SLH\-DSA\-SHAKE\-128s, EVP_PKEY\-SLH\-DSA\-SHAKE\-128f,
EVP_PKEY\-SLH\-DSA\-SHAKE\-192s, EVP_PKEY\-SLH\-DSA\-SHAKE\-192f,
EVP_PKEY\-SLH\-DSA\-SHAKE\-256s, EVP_PKEY\-SLH\-DSA\-SHAKE\-256f
\&\- EVP_PKEY SLH\-DSA keytype and algorithm support
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBSLH\-DSA\-SHA2\-128s\fR, \fBEVP_PKEY\-SLH\-DSA\-SHA2\-128f\fR,
\&\fBSLH\-DSA\-SHA2\-192s\fR, \fBEVP_PKEY\-SLH\-DSA\-SHA2\-192f\fR,
\&\fBSLH\-DSA\-SHA2\-256s\fR, \fBEVP_PKEY\-SLH\-DSA\-SHA2\-256f\fR,
\&\fBSLH\-DSA\-SHAKE\-128s\fR, \fBEVP_PKEY\-SLH\-DSA\-SHAKE\-128f\fR,
\&\fBSLH\-DSA\-SHAKE\-192s\fR, \fBEVP_PKEY\-SLH\-DSA\-SHAKE\-192f\fR,
\&\fBSLH\-DSA\-SHAKE\-256s\fR and \fBEVP_PKEY\-SLH\-DSA\-SHAKE\-256f\fR key types are
implemented in OpenSSL's default and \s-1FIPS\s0 providers.  These implementations
support the associated key, containing the public key \fIpub\fR and the
private key \fIpriv\fR.
.PP
SLH-DSA (Stateless Hash-based Digital Signature Standard) uses small keys,
but has relatively large signatures and is relatively slow performing all
operations compared to \fBML-DSA\fR. It does however have proven security proofs,
since it relies only on hash functions.
.PP
Each of the different key types has an associated security parameter \fBn\fR.
This value is one of 16, 24 or 32 for key types \fBSLH\-DSA*128*\fR, \fBSLH\-DSA*192*\fR
and \fBSLH\-DSA*256*\fR, respectively.
.PP
Both the public and private key components contain 2 elements of size \fBn\fR.
Key generation generates the private key elements and one of the public key
elements randomly, and the final public key element is computed from these values.
.PP
The public key has relatively small sizes of 32, 48 or 64 bytes,
corresponding to the algorithm names of 128, 192 and 256 respectively.
.PP
The algorithms ending with \fBs\fR produce smaller signatures, but are much slower
than the faster \fBf\fR variants.
.PP
The signature sizes for the \fBs\fR algorithm variants are 7856, 16224 and 29792
which correspond to the algorithm names of 128s, 192s and 256s respectively.
The signature sizes for the \fBf\fR algorithm variants are 17088, 35664 and 49856
which correspond to the algorithm names containing 128f, 192f and 256f respectively.
.PP
Internally there are 7 hash related functions that are used for each algorithm.
For algorithms containing \fB\s-1SHAKE\s0\fR in their name \fB\s-1SHAKE\-256\s0\fR is used for all
functions.
For the <\s-1SHA2\-128\s0> algorithms the functions use <\s-1MGF1\-SHA\-256\s0>, <\s-1HMAC\-SHA\-256\s0>
and <\s-1SHA\-256\s0>.
The remaining <\s-1SHA2\s0> algorithms use <\s-1MGF1\-SHA\-512\s0>, <\s-1HMAC\-SHA\-512\s0>, <\s-1SHA\-256\s0> and
<\s-1SHA\-512\s0>.
See \s-1FIPS 205\s0 Section 11.1 and 11.2 for more information.
.SS "Keygen Parameters"
.IX Subsection "Keygen Parameters"
.ie n .IP """seed"" (\fB\s-1OSSL_PKEY_PARAM_SLH_DSA_SEED\s0\fR) <octet string>" 4
.el .IP "``seed'' (\fB\s-1OSSL_PKEY_PARAM_SLH_DSA_SEED\s0\fR) <octet string>" 4
.IX Item "seed (OSSL_PKEY_PARAM_SLH_DSA_SEED) <octet string>"
Supplies values to use for the private seed, private prf and
public seed instead of generating random values. This is used for testing
purposes only. The length of the value supplied must be 3 * \fBn\fR.
.ie n .IP """properties"" (\fB\s-1OSSL_PKEY_PARAM_PROPERTIES\s0\fR) <utf8_string>" 4
.el .IP "``properties'' (\fB\s-1OSSL_PKEY_PARAM_PROPERTIES\s0\fR) <utf8_string>" 4
.IX Item "properties (OSSL_PKEY_PARAM_PROPERTIES) <utf8_string>"
Sets properties to be used when fetching algorithm implementations used for
SLH-DSA hashing operations.
.PP
Use \fBEVP_PKEY_CTX_set_params()\fR after calling \fBEVP_PKEY_keygen_init()\fR.
.SS "Common SLH-DSA parameters"
.IX Subsection "Common SLH-DSA parameters"
In addition to the common parameters that all keytypes should support (see
\&\*(L"Common Information Parameters\*(R" in \fBprovider\-keymgmt\fR\|(7)), the implementation of
these key types support the following.
.PP
The following parameters are gettable using \fBEVP_PKEY_get_octet_string_param()\fR,
and settable when using \fBEVP_PKEY_fromdata()\fR.
.ie n .IP """pub"" (\fB\s-1OSSL_PKEY_PARAM_PUB_KEY\s0\fR) <octet string>" 4
.el .IP "``pub'' (\fB\s-1OSSL_PKEY_PARAM_PUB_KEY\s0\fR) <octet string>" 4
.IX Item "pub (OSSL_PKEY_PARAM_PUB_KEY) <octet string>"
The public key has a size of 2 * \fBn\fR bytes.
i.e. It consists of the concatenation of \s-1PK\s0.seed and \s-1PK\s0.root
as defined by \s-1FIPS 205\s0 Figure 16.
.ie n .IP """priv"" (\fB\s-1OSSL_PKEY_PARAM_PRIV_KEY\s0\fR) <octet string>" 4
.el .IP "``priv'' (\fB\s-1OSSL_PKEY_PARAM_PRIV_KEY\s0\fR) <octet string>" 4
.IX Item "priv (OSSL_PKEY_PARAM_PRIV_KEY) <octet string>"
The private key has a size of 4 * \fBn\fR bytes, which includes the public key components.
i.e. It consists of the concatenation of \s-1SK\s0.seed, \s-1SK\s0.prf, \s-1PK\s0.seed and \s-1PF\s0.root
as defined by \s-1FIPS 205\s0 Figure 15.
.ie n .IP """mandatory-digest"" (\fB\s-1OSSL_PKEY_PARAM_MANDATORY_DIGEST\s0\fR) <\s-1UTF8\s0 string>" 4
.el .IP "``mandatory-digest'' (\fB\s-1OSSL_PKEY_PARAM_MANDATORY_DIGEST\s0\fR) <\s-1UTF8\s0 string>" 4
.IX Item "mandatory-digest (OSSL_PKEY_PARAM_MANDATORY_DIGEST) <UTF8 string>"
The empty string, signifying that no digest may be specified.
.SH "CONFORMING TO"
.IX Header "CONFORMING TO"
.IP "\s-1FIPS 205\s0" 4
.IX Item "FIPS 205"
.SH "EXAMPLES"
.IX Header "EXAMPLES"
An \fB\s-1EVP_PKEY\s0\fR context can be obtained by calling:
.PP
.Vb 2
\&    EVP_PKEY_CTX *pctx =
\&        EVP_PKEY_CTX_new_from_name(NULL, "SLH\-DSA\-SHA2\-128f", NULL);
.Ve
.PP
An \fBSLH-DSA\fR key can be generated like this:
.PP
.Vb 1
\&    pkey = EVP_PKEY_Q_keygen(NULL, NULL, "SLH\-DSA\-SHA2\-128f");
.Ve
.PP
The key pair components can be extracted from a key by calling:
.PP
.Vb 2
\&    uint8_t priv[64], pub[32];
\&    size_t priv_len, pub_len;
\&
\&    EVP_PKEY_get_octet_string_param(pkey, OSSL_PKEY_PARAM_PRIV_KEY,
\&                                    priv, sizeof(priv), &priv_len);
\&    EVP_PKEY_get_octet_string_param(pkey, OSSL_PKEY_PARAM_PUB_KEY,
\&                                    pub, sizeof(pub), &pub_len));
.Ve
.PP
Similar code can be used for the other key types such as \*(L"SLH\-DSA\-SHAKE\-256f\*(R".
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1\fBEVP_KEYMGMT\s0\fR\|(3), \s-1\fBEVP_PKEY\s0\fR\|(3), \fBprovider\-keymgmt\fR\|(7),
\&\s-1\fBEVP_SIGNATURE\-SLH\-DSA\s0\fR\|(7)
.SH "HISTORY"
.IX Header "HISTORY"
This functionality was added in OpenSSL 3.5.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2024\-2025 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.
