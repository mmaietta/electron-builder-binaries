.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_NEW_LISTENER 3ssl"
.TH SSL_NEW_LISTENER 3ssl "2025-04-08" "3.5.0" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_new_listener, SSL_new_listener_from, SSL_is_listener, SSL_get0_listener,
SSL_listen,
SSL_accept_connection, SSL_get_accept_connection_queue_len,
SSL_new_from_listener,
SSL_ACCEPT_CONNECTION_NO_BLOCK \- SSL object interface for abstracted connection
acceptance
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& SSL *SSL_new_listener(SSL_CTX *ctx, uint64_t flags);
\& SSL *SSL_new_listener_from(SSL *ssl, uint64_t flags);
\&
\& int SSL_is_listener(SSL *ssl);
\& SSL *SSL_get0_listener(SSL *ssl);
\&
\& int SSL_listen(SSL *ssl);
\&
\& #define SSL_ACCEPT_CONNECTION_NO_BLOCK
\& SSL *SSL_accept_connection(SSL *ssl, uint64_t flags);
\&
\& size_t SSL_get_accept_connection_queue_len(SSL *ssl);
\&
\& SSL *SSL_new_from_listener(SSL *ssl, uint64_t flags);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBSSL_new_listener()\fR function creates a listener \s-1SSL\s0 object.  Listener \s-1SSL\s0
objects are specialised to only accept network connections in a protocol\-
agnostic manner. They cannot be used, for example, for sending or receiving data
using \fBSSL_write_ex\fR\|(3) or \fBSSL_read_ex\fR\|(3). In general, only those functions
expressly documented as being supported on a listener \s-1SSL\s0 object are available.
.PP
The \fBSSL_new_listener_from()\fR function creates a listener \s-1SSL\s0 object which is
subordinate to a \s-1QUIC\s0 domain \s-1SSL\s0 object \fIssl\fR. See \fBSSL_new_domain\fR\|(3) and
\&\fBopenssl\-quic\-concurrency\fR\|(7) for details on \s-1QUIC\s0 domain \s-1SSL\s0 objects.
.PP
A listener \s-1SSL\s0 object supports the following operations:
.IP "\(bu" 4
Standard reference counting and free operations, such as \fBSSL_up_ref\fR\|(3) and
\&\fBSSL_free\fR\|(3);
.IP "\(bu" 4
Network \s-1BIO\s0 configuration operations, such as \fBSSL_set_bio\fR\|(3);
.IP "\(bu" 4
Event processing and polling enablement APIs such as \fBSSL_handle_events\fR\|(3),
\&\fBSSL_get_event_timeout\fR\|(3), \fBSSL_get_rpoll_descriptor\fR\|(3),
\&\fBSSL_get_wpoll_descriptor\fR\|(3), \fBSSL_net_read_desired\fR\|(3) and
\&\fBSSL_net_write_desired\fR\|(3);
.IP "\(bu" 4
Certain configurable parameters described in \fBSSL_get_value_uint\fR\|(3) (see
\&\fBSSL_get_value_uint\fR\|(3) for details);
.IP "\(bu" 4
Accepting network connections using the functions documented in this manual
page, such as \fBSSL_accept_connection()\fR.
.PP
The basic workflow of using a listener object is as follows:
.IP "\(bu" 4
Create a new listener object using \fBSSL_new_listener()\fR using a \fB\s-1SSL_CTX\s0\fR which
uses a supported \fB\s-1SSL_METHOD\s0\fR (such as \fBOSSL_QUIC_server_method\fR\|(3));
.IP "\(bu" 4
Configure appropriate network BIOs using \fBSSL_set_bio\fR\|(3) on the listener \s-1SSL\s0
object;
.IP "\(bu" 4
Configure the blocking mode using \fBSSL_set_blocking_mode\fR\|(3);
.IP "\(bu" 4
Accept connections in a loop by calling \fBSSL_accept_connection()\fR. Each returned
\&\s-1SSL\s0 object is a valid connection which can be used in a normal manner.
.PP
The \fBSSL_is_listener()\fR function returns 1 if and only if a \s-1SSL\s0 object is a
listener \s-1SSL\s0 object.
.PP
The \fBSSL_get0_listener()\fR function returns a listener object which is related to
the given \s-1SSL\s0 object, if there is one. For a listener object, this is the same
object (the function returns its argument). For a connection object which was
created by a listener object, that listener object is returned. If the \fIssl\fR
argument is an \s-1SSL\s0 object which is not a listener object and which is not
descended from a listener object (e.g. a connection obtained using
\&\fBSSL_accept_connection()\fR) or indirectly from a listener object (e.g. a \s-1QUIC\s0
stream \s-1SSL\s0 object obtained using \fBSSL_accept_stream()\fR called on a connection
obtained using \fBSSL_accept_connection()\fR) the return value is \s-1NULL.\s0 See \s-1NOTES\s0
below for caveats related to pending \s-1SSL\s0 connections on a \s-1QUIC\s0 listener's accept
queue.
.PP
The \fBSSL_listen()\fR function begins monitoring the listener \fIssl\fR for incoming
connections. Appropriate BIOs must have been configured before calling
\&\fBSSL_listen()\fR, along with any other needed configuration for the listener \s-1SSL\s0
object. It is typically not necessary to call \fBSSL_listen()\fR because it will be
called automatically on the first call to \fBSSL_accept_connection()\fR. However,
\&\fBSSL_listen()\fR may be called explicitly if it is desired to control precisely when
the listening process begins, or to ensure that no errors occur when starting to
listen for connections. After a call to \fBSSL_listen()\fR (or
\&\fBSSL_accept_connection()\fR) succeeds. The \fBSSL_listen()\fR function is idempotent,
subsequent calls on the same \fIssl\fR object are no-ops. This call is supported
only on listener \s-1SSL\s0 objects.
.PP
The \fBSSL_accept_connection()\fR call is supported only on a listener \s-1SSL\s0 object and
accepts a new incoming connection. A new \s-1SSL\s0 object representing the accepted
connection is created and returned on success. If no incoming connection is
available and the listener \s-1SSL\s0 object is configured in nonblocking mode, \s-1NULL\s0 is
returned.
.PP
The \fB\s-1SSL_ACCEPT_CONNECTION_NO_BLOCK\s0\fR flag may be specified to
\&\fBSSL_accept_connection()\fR. If specified, the call does not block even if the
listener \s-1SSL\s0 object is configured in blocking mode.
.PP
The \fBSSL_get_accept_connection_queue_len()\fR call returns the number of pending
connections on the \fIssl\fR listener's queue. \fBSSL_accept_connection()\fR returns the
next pending connection, removing it from the queue. The returned connection
count is a point-in-time value, the actual number of connections that will
ultimately be returned may be different.
.PP
Currently, listener \s-1SSL\s0 objects are only supported for \s-1QUIC\s0 server usage via
\&\fBOSSL_QUIC_server_method\fR\|(3), or \s-1QUIC\s0 client-only usage via
\&\fBOSSL_QUIC_client_method\fR\|(3) or \fBOSSL_QUIC_client_thread_method\fR\|(3) (see
\&\*(L"CLIENT-ONLY \s-1USAGE\*(R"\s0). It is expected that the listener interface, which
provides an abstracted \s-1API\s0 for connection acceptance, will be expanded to
support other protocols, such as \s-1TLS\s0 over \s-1TCP,\s0 plain \s-1TCP\s0 or \s-1DTLS\s0 in future.
.PP
\&\fBSSL_listen()\fR and \fBSSL_accept_connection()\fR are \*(L"I/O\*(R" functions, meaning that they
update the value returned by \fBSSL_get_error\fR\|(3) if they fail.
.SH "CLIENT-ONLY USAGE"
.IX Header "CLIENT-ONLY USAGE"
It is also possible to use the listener interface without accepting any
connections and without listening for connections. This can be useful in
circumstances where it is desirable for multiple connections to share the same
underlying network resources. For example, multiple outgoing \s-1QUIC\s0 client
connections could be made to use the same underlying \s-1UDP\s0 socket.
.PP
To disable client address validation on a listener \s-1SSL\s0 object, the flag
\&\fB\s-1SSL_LISTENER_FLAG_NO_VALIDATE\s0\fR may be passed in the flags field of both
\&\fBSSL_new_listener()\fR and \fBSSL_new_listener_from()\fR.  Note that this flag only
impacts the sending of retry frames for server address validation.  Tokens may
still be communicated from the server via \s-1NEW_TOKEN\s0 frames, which will still
be validated on receipt in future connections.  Note that this setting is not
recommended and may be dangerous in untrusted environments.  Not performing
address validation exposes the server to malicious clients that may open large
numbers of connections and never transact data on them (roughly equivalent to
a \s-1TCP\s0 syn flood attack), which address validation mitigates.
.PP
The \fBSSL_new_from_listener()\fR function creates a client connection under a given
listener \s-1SSL\s0 object. For \s-1QUIC,\s0 it is also possible to use
\&\fBSSL_new_from_listener()\fR, leading to a \s-1UDP\s0 network endpoint which has both
incoming and outgoing connections.
.PP
The \fIflags\fR argument of \fBSSL_new_from_listener()\fR is reserved and must be set to
0.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fBSSL_new_listener()\fR and \fBSSL_new_listener_from()\fR return a new listener \s-1SSL\s0 object
or \s-1NULL\s0 on failure.
.PP
\&\fBSSL_is_listener()\fR returns 1 if its \fIssl\fR argument is a listener object, 0
otherwise.
.PP
\&\fBSSL_get0_listener()\fR returns an \s-1SSL\s0 object pointer (potentially to the same
object on which it is called) or \s-1NULL.\s0
.PP
\&\fBSSL_listen()\fR returns 1 on success or 0 on failure.
.PP
\&\fBSSL_accept_connection()\fR returns a pointer to a new \s-1SSL\s0 object on success or \s-1NULL\s0
on failure. On success, the caller assumes ownership of the reference.
.PP
\&\fBSSL_get_accept_connection_queue_len()\fR returns a nonnegative value, or 0 if the
queue is empty, or called on an unsupported \s-1SSL\s0 object type.
.PP
\&\fBSSL_new_from_listener()\fR returns a pointer to a new \s-1SSL\s0 object on success or \s-1NULL\s0
on failure. On success, the caller assumes ownership of the reference.
.SH "NOTES"
.IX Header "NOTES"
\&\fBSSL_get0_listener()\fR behaves somewhat differently in \s-1SSL\s0 callbacks for \s-1QUIC\s0
connections.  As \s-1QUIC\s0 connections begin \s-1TLS\s0 handshake operations prior to them
being accepted via \fBSSL_accept_connection()\fR, an application may receive callbacks
for such pending connection prior to acceptance via \fBSSL_accept_connection()\fR.  As
listener association takes place during the accept process, prior to being
returned from \fBSSL_accept_connection()\fR, calls to \fBSSL_get0_listener()\fR made from
such \s-1SSL\s0 callbacks will return \s-1NULL.\s0  This can be used as an indicator within
the callback that the referenced \s-1SSL\s0 object has not yet been accepted.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBOSSL_QUIC_server_method\fR\|(3), \fBSSL_free\fR\|(3), \fBSSL_set_bio\fR\|(3),
\&\fBSSL_handle_events\fR\|(3), \fBSSL_get_rpoll_descriptor\fR\|(3),
\&\fBSSL_set_blocking_mode\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
These functions were added in OpenSSL 3.5.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2024\-2025 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.
